import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date
import re
import warnings
import streamlit as st

warnings.filterwarnings('ignore')

# === Streamlit UI —Å –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π ===
st.set_page_config(layout="centered", page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏—á–∞–ª–∞ '–Ø—Ö—Ä–æ–º–∞'")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏—á–∞–ª–∞ '–Ø—Ö—Ä–æ–º–∞'")

# –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns([3, 1])
with col1:
    st.write("")  # –û—Ç—Å—Ç—É–ø
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.cache_data.clear()
        st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

@st.cache_data(ttl=300)
def load_and_process_data():
    url = 'https://docs.google.com/spreadsheets/d/1rkmxMAb7B0RjM3PHknnkix_P5izTWyNIA3KTZvy9sWs/export?format=csv'
    try:
        df = pd.read_csv(url)
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    def normalize_column_names(df):
        df.columns = df.columns.str.lower().str.replace('—ë', '–µ').str.replace('c', '—Å', regex=False)
        df.columns = df.columns.str.strip()
        return df
    
    df = normalize_column_names(df)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['—Å—É–¥–Ω–æ', '–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å', '–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ',
                        '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.', '–±—Ä—É—Ç—Ç–æ']
    column_mapping = {}
    
    for req_col in required_columns:
        matched = False
        for avail_col in df.columns:
            if req_col == avail_col or req_col in avail_col:
                column_mapping[req_col] = avail_col
                matched = True
                break
        if not matched:
            column_mapping[req_col] = req_col

    for standard_name, actual_name in column_mapping.items():
        if actual_name in df.columns:
            df[standard_name] = df[actual_name]
        else:
            df[standard_name] = np.nan

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    def parse_date(date_str):
        if pd.isna(date_str) or date_str == '' or str(date_str).strip() == 'nan':
            return pd.NaT
        try:
            return datetime.strptime(str(date_str).strip(), '%d.%m.%Y')
        except:
            try:
                return pd.to_datetime(date_str)
            except:
                return pd.NaT

    df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'] = df['–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å'].apply(parse_date)
    df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'] = df['–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ'].apply(parse_date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    def safe_convert_to_float(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return np.nan
        try:
            x_str = str(x).replace(',', '.').strip()
            return float(x_str)
        except:
            return np.nan

    df['–±—Ä—É—Ç—Ç–æ'] = df['–±—Ä—É—Ç—Ç–æ'].apply(safe_convert_to_float)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    def safe_str_convert(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return ''
        return str(x).strip()

    text_columns = ['—Å—É–¥–Ω–æ', '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.']
    for col in text_columns:
        if col in df.columns:
            df[col] = df[col].apply(safe_str_convert)

    return df

df = load_and_process_data()
if df is None:
    st.stop()

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
today = pd.to_datetime(date.today())

# –°—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–∞
shipped = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()]
on_pier = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]
in_transit = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].isna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]

# === –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ===
st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

col1, col2, col3 = st.columns(3)
with col1:
    total_shipped = shipped['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–í—Å–µ–≥–æ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ", f"{total_shipped:,.0f} —Ç")
with col2:
    total_on_pier = on_pier['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–ù–∞ –ø—Ä–∏—á–∞–ª–µ", f"{total_on_pier:,.0f} —Ç")
with col3:
    total_transit = in_transit['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ", f"{total_transit:,.0f} —Ç")

# === 1. –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–í–°–ï –∫–ª–∏–µ–Ω—Ç—ã) ===
st.header("üë• –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã)")

# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –í–°–ï–ú –∫–ª–∏–µ–Ω—Ç–∞–º
shipped_agg = shipped.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–æ—Ç–≥—Ä—É–∂–µ–Ω–æ').reset_index()
on_pier_agg = on_pier.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–Ω–∞_–ø—Ä–∏—á–∞–ª–µ').reset_index()
in_transit_agg = in_transit.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ').reset_index()

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
all_clients = df['–∫–ª–∏–µ–Ω—Ç'].unique()
client_status = pd.DataFrame({'–∫–ª–∏–µ–Ω—Ç': all_clients})

# –ú–µ—Ä–¥–∂–∏–º —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
client_status = client_status.merge(shipped_agg, on='–∫–ª–∏–µ–Ω—Ç', how='left') \
    .merge(on_pier_agg, on='–∫–ª–∏–µ–Ω—Ç', how='left') \
    .merge(in_transit_agg, on='–∫–ª–∏–µ–Ω—Ç', how='left') \
    .fillna(0)

client_status['–≤—Å–µ–≥–æ'] = client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'] + client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'] + client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ']
client_status = client_status.sort_values('–≤—Å–µ–≥–æ', ascending=False)

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
fig_clients = go.Figure()
fig_clients.add_trace(go.Bar(name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'], 
                            marker_color='#FF6B6B'))
fig_clients.add_trace(go.Bar(name='–ù–∞ –ø—Ä–∏—á–∞–ª–µ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'], 
                            marker_color='#4ECDC4'))
fig_clients.add_trace(go.Bar(name='–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ'], 
                            marker_color='#45B7D1'))

fig_clients.update_layout(
    height=500,
    showlegend=True,
    barmode='stack',
    margin=dict(t=30, b=150, l=50, r=30),  # –£–≤–µ–ª–∏—á–∏–ª –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    xaxis_tickangle=-45
)
st.plotly_chart(fig_clients, use_container_width=True)

# –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"):
    display_table = client_status.copy()
    display_table['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'] = display_table['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'].round(1)
    display_table['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'] = display_table['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'].round(1)
    display_table['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ'] = display_table['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ'].round(1)
    display_table['–≤—Å–µ–≥–æ'] = display_table['–≤—Å–µ–≥–æ'].round(1)
    
    st.dataframe(
        display_table,
        column_config={
            "–∫–ª–∏–µ–Ω—Ç": "–ö–ª–∏–µ–Ω—Ç",
            "–æ—Ç–≥—Ä—É–∂–µ–Ω–æ": st.column_config.NumberColumn("–û—Ç–≥—Ä—É–∂–µ–Ω–æ (—Ç)", format="%.1f —Ç"),
            "–Ω–∞_–ø—Ä–∏—á–∞–ª–µ": st.column_config.NumberColumn("–ù–∞ –ø—Ä–∏—á–∞–ª–µ (—Ç)", format="%.1f —Ç"),
            "–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ": st.column_config.NumberColumn("–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ (—Ç)", format="%.1f —Ç"),
            "–≤—Å–µ–≥–æ": st.column_config.NumberColumn("–í—Å–µ–≥–æ (—Ç)", format="%.1f —Ç"),
        },
        use_container_width=True
    )

# === 2. –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===
st.header("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏")

shipped_today = shipped[shipped['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.date == today.date()]
shipped_today_by_client = shipped_today.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().reset_index()
shipped_today_by_client = shipped_today_by_client.sort_values('–±—Ä—É—Ç—Ç–æ', ascending=False)

if len(shipped_today_by_client) > 0:
    fig_today = px.bar(shipped_today_by_client, x='–∫–ª–∏–µ–Ω—Ç', y='–±—Ä—É—Ç—Ç–æ', 
                      title=f"–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ {today.strftime('%d.%m.%Y')}",
                      color='–±—Ä—É—Ç—Ç–æ', color_continuous_scale='Viridis')
    fig_today.update_layout(height=400, margin=dict(t=40, b=100, l=50, r=30),
                           xaxis_tickangle=-45)
    st.plotly_chart(fig_today, use_container_width=True)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    total_today = shipped_today_by_client['–±—Ä—É—Ç—Ç–æ'].sum()
    st.info(f"–í—Å–µ–≥–æ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: **{total_today:,.1f} —Ç**")
else:
    st.info("–°–µ–≥–æ–¥–Ω—è –æ—Ç–≥—Ä—É–∑–æ–∫ –Ω–µ –±—ã–ª–æ")

# === 3. –ü–æ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
st.header("üìÜ –ü–æ–º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")

arrival_data = df[df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()].copy()
arrival_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = arrival_data['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].dt.to_period('M')
monthly_arrivals = arrival_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
monthly_arrivals.columns = ['–º–µ—Å—è—Ü', '–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω', '–ø—Ä–∏–Ω—è—Ç–æ_–º–µ—Å—Ç']
monthly_arrivals['–º–µ—Å—è—Ü'] = monthly_arrivals['–º–µ—Å—è—Ü'].astype(str)

shipment_data = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()].copy()
shipment_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = shipment_data['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.to_period('M')
monthly_shipments = shipment_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '–∫–ª–∏–µ–Ω—Ç': 'nunique'
}).reset_index()
monthly_shipments.columns = ['–º–µ—Å—è—Ü', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω', '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∫–ª–∏–µ–Ω—Ç–æ–≤']
monthly_shipments['–º–µ—Å—è—Ü'] = monthly_shipments['–º–µ—Å—è—Ü'].astype(str)

monthly_stats = pd.merge(monthly_arrivals, monthly_shipments, on='–º–µ—Å—è—Ü', how='outer').fillna(0)

if len(monthly_stats) > 0:
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–Ω—è—Ç–æ vs –æ—Ç–≥—Ä—É–∂–µ–Ω–æ
    fig_monthly = go.Figure()
    fig_monthly.add_trace(go.Bar(name='–ü—Ä–∏–Ω—è—Ç–æ', x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω'],
                                marker_color='#4ECDC4'))
    fig_monthly.add_trace(go.Bar(name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω'],
                                marker_color='#FF6B6B'))
    
    fig_monthly.update_layout(
        height=400, 
        margin=dict(t=40, b=80, l=50, r=30),
        xaxis_tickangle=-45,
        barmode='group'
    )
    st.plotly_chart(fig_monthly, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    fig_clients_monthly = px.line(monthly_stats, x='–º–µ—Å—è—Ü', y='—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∫–ª–∏–µ–Ω—Ç–æ–≤',
                                 title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º',
                                 markers=True)
    fig_clients_monthly.update_layout(height=300, margin=dict(t=40, b=50, l=50, r=30))
    st.plotly_chart(fig_clients_monthly, use_container_width=True)

# === 4. –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–±—â–µ–º—É —Ç–æ–Ω–Ω–∞–∂—É ===
st.header("üèÜ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–±—â–µ–º—É —Ç–æ–Ω–Ω–∞–∂—É")

client_analysis = shipment_data.groupby('–∫–ª–∏–µ–Ω—Ç').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
client_analysis.columns = ['–∫–ª–∏–µ–Ω—Ç', '–æ–±—â–∏–π_–≤–µ—Å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç']
client_analysis = client_analysis.sort_values('–æ–±—â–∏–π_–≤–µ—Å', ascending=False)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 –∫–ª–∏–µ–Ω—Ç–æ–≤
top_clients = client_analysis.head(15)

fig_top = px.bar(top_clients, x='–æ–±—â–∏–π_–≤–µ—Å', y='–∫–ª–∏–µ–Ω—Ç', orientation='h',
                title="–¢–æ–ø-15 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–±—â–µ–º—É —Ç–æ–Ω–Ω–∞–∂—É",
                color='–æ–±—â–∏–π_–≤–µ—Å', color_continuous_scale='Blues')
fig_top.update_layout(height=500, margin=dict(t=40, b=20, l=150, r=20))
st.plotly_chart(fig_top, use_container_width=True)

# === 5. –ê–Ω–∞–ª–∏–∑ —Å—É–¥–æ–≤ ===
st.header("üö¢ –ê–Ω–∞–ª–∏–∑ —Å—É–¥–æ–≤")

def analyze_circular_voyages(vessel_name):
    if pd.isna(vessel_name) or vessel_name == '':
        return vessel_name, 0
    vessel_str = str(vessel_name).strip()
    pattern = r'^(.*?)\s*\((\d+)\)\s*$'
    match = re.search(pattern, vessel_str)
    if match:
        base_name = match.group(1).strip()
        voyage_number = int(match.group(2))
        return base_name, voyage_number
    else:
        return vessel_str, 0

arrival_data = df[df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()].copy()
arrival_data[['–±–∞–∑–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–æ–º–µ—Ä_–∫—Ä—É–≥–æ—Ä–µ–π—Å–∞']] = arrival_data['—Å—É–¥–Ω–æ'].apply(
    lambda x: pd.Series(analyze_circular_voyages(x))
)

vessel_stats = arrival_data.groupby('–±–∞–∑–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ').agg({
    '–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å': 'nunique',
    '–Ω–æ–º–µ—Ä_–∫—Ä—É–≥–æ—Ä–µ–π—Å–∞': 'max',
    '–±—Ä—É—Ç—Ç–æ': 'sum'
}).reset_index()
vessel_stats.columns = ['—Å—É–¥–Ω–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞—Ö–æ–¥–æ–≤', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–∫—Ä—É–≥–æ—Ä–µ–π—Å', '–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂']
vessel_stats = vessel_stats.sort_values('–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂', ascending=False).head(10)

if len(vessel_stats) > 0:
    fig_vessels = px.bar(vessel_stats, x='–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂', y='—Å—É–¥–Ω–æ', orientation='h',
                        title="–¢–æ–ø-10 —Å—É–¥–æ–≤ –ø–æ —Ç–æ–Ω–Ω–∞–∂—É",
                        color='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞—Ö–æ–¥–æ–≤', color_continuous_scale='Greens')
    fig_vessels.update_layout(height=400, margin=dict(t=40, b=20, l=150, r=20))
    st.plotly_chart(fig_vessels, use_container_width=True)

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
with st.expander("üìñ –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"):
    st.markdown("""
    ### üìå –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
    
    - **–û—Ç–≥—Ä—É–∂–µ–Ω–æ** ‚Äî –≥—Ä—É–∑, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –æ—Ç–≥—Ä—É–∂–µ–Ω —Å –ø—Ä–∏—á–∞–ª–∞
    - **–ù–∞ –ø—Ä–∏—á–∞–ª–µ** ‚Äî –ø—Ä–∏–Ω—è—Ç—ã–π –≥—Ä—É–∑, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ—Ç–≥—Ä—É–∂–µ–Ω  
    - **–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ** ‚Äî –≥—Ä—É–∑ –≤ –ø—É—Ç–∏ –∫ –ø—Ä–∏—á–∞–ª—É
    - **–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã** ‚Äî –≤–∫–ª—é—á–∞—è —Ç–µ—Ö, —É –∫–æ–≥–æ –º–∞–ª—ã–π —Ç–æ–Ω–Ω–∞–∂ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    
    ### üìä –ú–µ—Ç—Ä–∏–∫–∏:
    - **–¢–æ–Ω–Ω–∞–∂** –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ —Ç–æ–Ω–Ω–∞—Ö (—Ç)
    - **–î–∏–Ω–∞–º–∏–∫–∞** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    - **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü–µ
    """)

# –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}")
st.info(f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: **{len(client_status)}**")
