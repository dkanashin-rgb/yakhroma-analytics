import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date
import re
import warnings
import streamlit as st

warnings.filterwarnings('ignore')

# === Streamlit UI —Å –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π ===
st.set_page_config(layout="centered", page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏—á–∞–ª–∞ '–Ø—Ö—Ä–æ–º–∞'")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏—á–∞–ª–∞ '–Ø—Ö—Ä–æ–º–∞'")

# –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stMetric {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns([3, 1])
with col1:
    st.write("")  # –û—Ç—Å—Ç—É–ø
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        st.cache_data.clear()
        st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

@st.cache_data(ttl=300)
def load_and_process_data():
    url = 'https://docs.google.com/spreadsheets/d/1rkmxMAb7B0RjM3PHknnkix_P5izTWyNIA3KTZvy9sWs/export?format=csv'
    try:
        df = pd.read_csv(url)
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    def normalize_column_names(df):
        df.columns = df.columns.str.lower().str.replace('—ë', '–µ').str.replace('c', '—Å', regex=False)
        df.columns = df.columns.str.strip()
        return df
    
    df = normalize_column_names(df)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['—Å—É–¥–Ω–æ', '–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å', '–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ',
                        '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.', '–±—Ä—É—Ç—Ç–æ']
    column_mapping = {}
    
    for req_col in required_columns:
        matched = False
        for avail_col in df.columns:
            if req_col == avail_col or req_col in avail_col:
                column_mapping[req_col] = avail_col
                matched = True
                break
        if not matched:
            column_mapping[req_col] = req_col

    for standard_name, actual_name in column_mapping.items():
        if actual_name in df.columns:
            df[standard_name] = df[actual_name]
        else:
            df[standard_name] = np.nan

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    def parse_date(date_str):
        if pd.isna(date_str) or date_str == '' or str(date_str).strip() == 'nan':
            return pd.NaT
        try:
            return datetime.strptime(str(date_str).strip(), '%d.%m.%Y')
        except:
            try:
                return pd.to_datetime(date_str)
            except:
                return pd.NaT

    df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'] = df['–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å'].apply(parse_date)
    df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'] = df['–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ'].apply(parse_date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    def safe_convert_to_float(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return np.nan
        try:
            x_str = str(x).replace(',', '.').strip()
            return float(x_str)
        except:
            return np.nan

    df['–±—Ä—É—Ç—Ç–æ'] = df['–±—Ä—É—Ç—Ç–æ'].apply(safe_convert_to_float)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    def safe_str_convert(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return ''
        return str(x).strip()

    text_columns = ['—Å—É–¥–Ω–æ', '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.']
    for col in text_columns:
        if col in df.columns:
            df[col] = df[col].apply(safe_str_convert)

    return df

df = load_and_process_data()
if df is None:
    st.stop()

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
today = pd.to_datetime(date.today())

# –°—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–∞
shipped = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()]
on_pier = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]
in_transit = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].isna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]

# === –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ===
st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

col1, col2, col3 = st.columns(3)
with col1:
    total_shipped = shipped['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–í—Å–µ–≥–æ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ", f"{total_shipped:,.0f} —Ç")
with col2:
    total_on_pier = on_pier['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–ù–∞ –ø—Ä–∏—á–∞–ª–µ", f"{total_on_pier:,.0f} —Ç")
with col3:
    total_transit = in_transit['–±—Ä—É—Ç—Ç–æ'].sum()
    st.metric("–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ", f"{total_transit:,.0f} —Ç")

# === 1. –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º ===
st.header("üë• –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º")

shipped_agg = shipped.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–æ—Ç–≥—Ä—É–∂–µ–Ω–æ').reset_index()
on_pier_agg = on_pier.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–Ω–∞_–ø—Ä–∏—á–∞–ª–µ').reset_index()
in_transit_agg = in_transit.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ').reset_index()

client_status = shipped_agg.merge(on_pier_agg, on='–∫–ª–∏–µ–Ω—Ç', how='outer') \
    .merge(in_transit_agg, on='–∫–ª–∏–µ–Ω—Ç', how='outer') \
    .fillna(0)
client_status['–≤—Å–µ–≥–æ'] = client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'] + client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'] + client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ']
client_status = client_status.sort_values('–≤—Å–µ–≥–æ', ascending=False).head(10)

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
fig_clients = go.Figure()
fig_clients.add_trace(go.Bar(name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'], 
                            marker_color='#FF6B6B'))
fig_clients.add_trace(go.Bar(name='–ù–∞ –ø—Ä–∏—á–∞–ª–µ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'], 
                            marker_color='#4ECDC4'))
fig_clients.add_trace(go.Bar(name='–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ', x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ'], 
                            marker_color='#45B7D1'))

fig_clients.update_layout(
    height=400,
    showlegend=True,
    barmode='stack',
    margin=dict(t=30, b=80, l=50, r=30),
    xaxis_tickangle=-45
)
st.plotly_chart(fig_clients, use_container_width=True)

# === 2. –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===
st.header("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏")

shipped_today = shipped[shipped['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.date == today.date()]
shipped_today_by_client = shipped_today.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().reset_index()
shipped_today_by_client = shipped_today_by_client.sort_values('–±—Ä—É—Ç—Ç–æ', ascending=False).head(10)

if len(shipped_today_by_client) > 0:
    fig_today = px.bar(shipped_today_by_client, x='–∫–ª–∏–µ–Ω—Ç', y='–±—Ä—É—Ç—Ç–æ', 
                      title=f"–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ {today.strftime('%d.%m.%Y')}",
                      color='–±—Ä—É—Ç—Ç–æ', color_continuous_scale='Viridis')
    fig_today.update_layout(height=300, margin=dict(t=40, b=80, l=50, r=30),
                           xaxis_tickangle=-45)
    st.plotly_chart(fig_today, use_container_width=True)
else:
    st.info("–°–µ–≥–æ–¥–Ω—è –æ—Ç–≥—Ä—É–∑–æ–∫ –Ω–µ –±—ã–ª–æ")

# === 3. –ü–æ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
st.header("üìÜ –ü–æ–º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")

arrival_data = df[df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()].copy()
arrival_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = arrival_data['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].dt.to_period('M')
monthly_arrivals = arrival_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
monthly_arrivals.columns = ['–º–µ—Å—è—Ü', '–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω', '–ø—Ä–∏–Ω—è—Ç–æ_–º–µ—Å—Ç']
monthly_arrivals['–º–µ—Å—è—Ü'] = monthly_arrivals['–º–µ—Å—è—Ü'].astype(str)

shipment_data = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()].copy()
shipment_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = shipment_data['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.to_period('M')
monthly_shipments = shipment_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '–∫–ª–∏–µ–Ω—Ç': 'nunique'
}).reset_index()
monthly_shipments.columns = ['–º–µ—Å—è—Ü', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω', '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∫–ª–∏–µ–Ω—Ç–æ–≤']
monthly_shipments['–º–µ—Å—è—Ü'] = monthly_shipments['–º–µ—Å—è—Ü'].astype(str)

monthly_stats = pd.merge(monthly_arrivals, monthly_shipments, on='–º–µ—Å—è—Ü', how='outer').fillna(0)

if len(monthly_stats) > 0:
    fig_monthly = go.Figure()
    fig_monthly.add_trace(go.Scatter(x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω'], 
                                    name='–ü—Ä–∏–Ω—è—Ç–æ', line=dict(color='#4ECDC4', width=3)))
    fig_monthly.add_trace(go.Scatter(x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω'], 
                                    name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', line=dict(color='#FF6B6B', width=3)))
    
    fig_monthly.update_layout(height=350, margin=dict(t=40, b=50, l=50, r=30),
                             xaxis_tickangle=-45)
    st.plotly_chart(fig_monthly, use_container_width=True)

# === 4. –ê–Ω–∞–ª–∏–∑ FIFO ===
st.header("‚ö° –ê–Ω–∞–ª–∏–∑ FIFO")

def analyze_fifo_violations(df):
    shipped_items = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()].copy()
    
    if len(shipped_items) == 0:
        return pd.DataFrame()
    
    fifo_violations = []
    
    for client in shipped_items['–∫–ª–∏–µ–Ω—Ç'].unique():
        if client == '':
            continue
            
        client_data = shipped_items[shipped_items['–∫–ª–∏–µ–Ω—Ç'] == client].copy()
        client_data = client_data.sort_values(['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å', '–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'])
        
        for i in range(len(client_data)):
            current_item = client_data.iloc[i]
            arrival_date = current_item['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å']
            shipment_date = current_item['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ']
            
            later_arrivals = client_data[
                (client_data['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'] > arrival_date) & 
                (client_data['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'] < shipment_date)
            ]
            
            for j, violation_item in later_arrivals.iterrows():
                fifo_violations.append({
                    '–∫–ª–∏–µ–Ω—Ç': client,
                    '—Ä–∞–Ω–µ–µ_–ø—Ä–∏–±—ã–≤—à–∞—è_–ø–æ–∑–∏—Ü–∏—è_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': current_item['‚Ññ —Å–µ—Ä—Ç–∏—Ñ.'],
                    '—Ä–∞–Ω–µ–µ_–ø—Ä–∏–±—ã–≤—à–∞—è_–ø–æ–∑–∏—Ü–∏—è_–¥–∞—Ç–∞_–ø—Ä–∏–±—ã—Ç–∏—è': arrival_date,
                    '—Ä–∞–Ω–µ–µ_–ø—Ä–∏–±—ã–≤—à–∞—è_–ø–æ–∑–∏—Ü–∏—è_–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏': shipment_date,
                    '–ø–æ–∑–∂–µ_–ø—Ä–∏–±—ã–≤—à–∞—è_–ø–æ–∑–∏—Ü–∏—è_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': violation_item['‚Ññ —Å–µ—Ä—Ç–∏—Ñ.'],
                    '–ø–æ–∑–∂–µ_–ø—Ä–∏–±—ã–≤—à–∞—è_–ø–æ–∑–∏—Ü–∏—è_–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏': violation_item['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'],
                    '—Ä–∞–∑–Ω–∏—Ü–∞_–≤_–¥–Ω—è—Ö_–æ—Ç–≥—Ä—É–∑–∫–∏': (shipment_date - violation_item['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ']).days
                })
    
    return pd.DataFrame(fifo_violations)

fifo_violations_df = analyze_fifo_violations(df)

col1, col2 = st.columns(2)
with col1:
    fifo_count = len(fifo_violations_df)
    st.metric("–ù–∞—Ä—É—à–µ–Ω–∏–π FIFO", fifo_count)
with col2:
    if fifo_count > 0:
        avg_delay = fifo_violations_df['—Ä–∞–∑–Ω–∏—Ü–∞_–≤_–¥–Ω—è—Ö_–æ—Ç–≥—Ä—É–∑–∫–∏'].mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞", f"{avg_delay:.1f} –¥–Ω.")

if len(fifo_violations_df) > 0:
    fifo_by_client = fifo_violations_df.groupby('–∫–ª–∏–µ–Ω—Ç').size().reset_index(name='–Ω–∞—Ä—É—à–µ–Ω–∏–π')
    fifo_by_client = fifo_by_client.sort_values('–Ω–∞—Ä—É—à–µ–Ω–∏–π', ascending=False).head(8)
    
    fig_fifo = px.bar(fifo_by_client, x='–∫–ª–∏–µ–Ω—Ç', y='–Ω–∞—Ä—É—à–µ–Ω–∏–π', 
                     color='–Ω–∞—Ä—É—à–µ–Ω–∏–π', color_continuous_scale='Reds')
    fig_fifo.update_layout(height=300, margin=dict(t=40, b=80, l=50, r=30),
                          xaxis_tickangle=-45, showlegend=False)
    st.plotly_chart(fig_fifo, use_container_width=True)
    
    with st.expander("–î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π"):
        st.dataframe(fifo_violations_df.head(10), use_container_width=True)
else:
    st.success("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π FIFO –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# === 5. –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
st.header("üèÜ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤")

shipment_data = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()].copy()
client_analysis = shipment_data.groupby('–∫–ª–∏–µ–Ω—Ç').agg({
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
client_analysis.columns = ['–∫–ª–∏–µ–Ω—Ç', '–æ–±—â–∏–π_–≤–µ—Å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç']
client_analysis = client_analysis.nlargest(8, '–æ–±—â–∏–π_–≤–µ—Å')

fig_top = px.pie(client_analysis, values='–æ–±—â–∏–π_–≤–µ—Å', names='–∫–ª–∏–µ–Ω—Ç', 
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º")
fig_top.update_layout(height=400, margin=dict(t=40, b=20, l=20, r=20))
st.plotly_chart(fig_top, use_container_width=True)

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
with st.expander("üìñ –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"):
    st.markdown("""
    - **–ù–∞ –ø—Ä–∏—á–∞–ª–µ** ‚Äî –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ  
    - **–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ** ‚Äî –≥—Ä—É–∑ –≤ –ø—É—Ç–∏ –∫ –ø—Ä–∏—á–∞–ª—É  
    - **–ù–∞—Ä—É—à–µ–Ω–∏–µ FIFO** ‚Äî –ø–æ–∑–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–≥—Ä—É–∂–µ–Ω–∞ —Ä–∞–Ω—å—à–µ —Ä–∞–Ω–Ω–µ–π
    - **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äî –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫ –ø—Ä–∏–Ω—è—Ç–æ–º—É
    """)

# –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}")
