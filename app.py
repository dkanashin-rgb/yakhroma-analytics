import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from datetime import datetime, date
import re
import warnings
import streamlit as st

warnings.filterwarnings('ignore')

# === Streamlit UI ===
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏—á–∞–ª–∞ '–Ø—Ö—Ä–æ–º–∞'")
st.title("–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –ê–ù–ê–õ–ò–¢–ò–ö–ò –ü–†–ò–ß–ê–õ–ê '–Ø–•–†–û–ú–ê'")

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.cache_data.clear()
    st.success("–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏.")

@st.cache_data(ttl=300)  # –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
def load_and_process_data():
    url = 'https://docs.google.com/spreadsheets/d/1rkmxMAb7B0RjM3PHknnkix_P5izTWyNIA3KTZvy9sWs/export?format=csv'
    try:
        df = pd.read_csv(url)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    def normalize_column_names(df):
        df.columns = df.columns.str.lower().str.replace('—ë', '–µ').str.replace('c', '—Å', regex=False)
        df.columns = df.columns.str.strip()
        return df
    df = normalize_column_names(df)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['—Å—É–¥–Ω–æ', '–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å', '–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ',
                        '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.', '–±—Ä—É—Ç—Ç–æ']
    column_mapping = {}
    for req_col in required_columns:
        matched = False
        for avail_col in df.columns:
            if req_col == avail_col or req_col in avail_col:
                column_mapping[req_col] = avail_col
                matched = True
                break
        if not matched:
            column_mapping[req_col] = req_col

    for standard_name, actual_name in column_mapping.items():
        if actual_name in df.columns:
            df[standard_name] = df[actual_name]
        else:
            df[standard_name] = np.nan

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    def parse_date(date_str):
        if pd.isna(date_str) or date_str == '' or str(date_str).strip() == 'nan':
            return pd.NaT
        try:
            return datetime.strptime(str(date_str).strip(), '%d.%m.%Y')
        except:
            try:
                return pd.to_datetime(date_str)
            except:
                return pd.NaT

    df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'] = df['–¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ –ø–∏—Ä—Å'].apply(parse_date)
    df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'] = df['–¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ'].apply(parse_date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    def safe_convert_to_float(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return np.nan
        try:
            x_str = str(x).replace(',', '.').strip()
            return float(x_str)
        except:
            return np.nan

    df['–±—Ä—É—Ç—Ç–æ'] = df['–±—Ä—É—Ç—Ç–æ'].apply(safe_convert_to_float)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    def safe_str_convert(x):
        if pd.isna(x) or x == '' or str(x).strip() == 'nan':
            return ''
        return str(x).strip()

    text_columns = ['—Å—É–¥–Ω–æ', '–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–Ω–æ–º–µ—Ä –∞–≤—Ç–æ', '—Ç–Ω', '–∫–ª–∏–µ–Ω—Ç', '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.']
    for col in text_columns:
        if col in df.columns:
            df[col] = df[col].apply(safe_str_convert)

    return df

df = load_and_process_data()
if df is None:
    st.stop()

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
today = pd.to_datetime(date.today())

# –°—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–∞
shipped = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()]
on_pier = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]
in_transit = df[(df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].isna()) & (df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].isna())]

# –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–≤—Å—ë –≤—Ä–µ–º—è)
shipped_agg = shipped.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–æ—Ç–≥—Ä—É–∂–µ–Ω–æ').reset_index()
on_pier_agg = on_pier.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–Ω–∞_–ø—Ä–∏—á–∞–ª–µ').reset_index()
in_transit_agg = in_transit.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().rename('–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ').reset_index()

client_status = shipped_agg.merge(on_pier_agg, on='–∫–ª–∏–µ–Ω—Ç', how='outer') \
    .merge(in_transit_agg, on='–∫–ª–∏–µ–Ω—Ç', how='outer') \
    .fillna(0)
client_status['–≤—Å–µ–≥–æ'] = client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'] + client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'] + client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ']
client_status = client_status.sort_values('–≤—Å–µ–≥–æ', ascending=False).head(15)

# –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
shipped_today = shipped[shipped['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.date == today.date()]
shipped_today_by_client = shipped_today.groupby('–∫–ª–∏–µ–Ω—Ç')['–±—Ä—É—Ç—Ç–æ'].sum().reset_index()
shipped_today_by_client = shipped_today_by_client.sort_values('–±—Ä—É—Ç—Ç–æ', ascending=False).head(15)

# –û—Å—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
shipment_data = df[df['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].notna()].copy()
shipment_data['—É–Ω–∏–∫–∞–ª—å–Ω–∞—è_–æ—Ç–≥—Ä—É–∑–∫–∞'] = (
    shipment_data['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.strftime('%Y-%m-%d') + '_' +
    shipment_data['–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫'] + '_' +
    shipment_data['–Ω–æ–º–µ—Ä –∞–≤—Ç–æ'] + '_' +
    shipment_data['—Ç–Ω']
)

client_analysis_all_time = shipment_data.groupby('–∫–ª–∏–µ–Ω—Ç').agg({
    '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è_–æ—Ç–≥—Ä—É–∑–∫–∞': 'nunique',
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
client_analysis_all_time.columns = ['–∫–ª–∏–µ–Ω—Ç', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤', '–æ–±—â–∏–π_–≤–µ—Å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç']
client_analysis_all_time['—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å'] = client_analysis_all_time['–æ–±—â–∏–π_–≤–µ—Å'] / client_analysis_all_time['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤']
client_analysis_all_time = client_analysis_all_time.sort_values('—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å', ascending=False)

# –ü–æ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
arrival_data = df[df['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].notna()].copy()
arrival_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = arrival_data['–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å'].dt.to_period('M')
monthly_arrivals = arrival_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '—Å—É–¥–Ω–æ': 'nunique',
    '–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å': 'nunique',
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
monthly_arrivals.columns = ['–º–µ—Å—è—Ü', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—É–¥–æ–≤', '–¥–Ω–µ–π_—Å_–ø—Ä–∏—Ö–æ–¥–∞–º–∏', '–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω', '–ø—Ä–∏–Ω—è—Ç–æ_–º–µ—Å—Ç']
monthly_arrivals['–º–µ—Å—è—Ü'] = monthly_arrivals['–º–µ—Å—è—Ü'].astype(str)

shipment_data['–≥–æ–¥_–º–µ—Å—è—Ü'] = shipment_data['–¥–∞—Ç–∞_–æ—Ç–≥—Ä—É–∑–∫–∏_–∞–≤—Ç–æ'].dt.to_period('M')
monthly_shipments = shipment_data.groupby('–≥–æ–¥_–º–µ—Å—è—Ü').agg({
    '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è_–æ—Ç–≥—Ä—É–∑–∫–∞': 'nunique',
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '–∫–ª–∏–µ–Ω—Ç': 'nunique',
    '‚Ññ —Å–µ—Ä—Ç–∏—Ñ.': 'count'
}).reset_index()
monthly_shipments.columns = ['–º–µ—Å—è—Ü', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω', '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∫–ª–∏–µ–Ω—Ç–æ–≤', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_–º–µ—Å—Ç']
monthly_shipments['–º–µ—Å—è—Ü'] = monthly_shipments['–º–µ—Å—è—Ü'].astype(str)

monthly_stats = pd.merge(monthly_arrivals, monthly_shipments, on='–º–µ—Å—è—Ü', how='outer').fillna(0)
monthly_stats['—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å'] = monthly_stats['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω'] / monthly_stats['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤']
monthly_stats['—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'] = np.where(
    monthly_stats['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω'] > 0,
    monthly_stats['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω'] / monthly_stats['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω'] * 100,
    0
)

# –ê–Ω–∞–ª–∏–∑ —Å—É–¥–æ–≤
def analyze_circular_voyages(vessel_name):
    if pd.isna(vessel_name) or vessel_name == '':
        return vessel_name, 0
    vessel_str = str(vessel_name).strip()
    pattern = r'^(.*?)\s*\((\d+)\)\s*$'
    match = re.search(pattern, vessel_str)
    if match:
        base_name = match.group(1).strip()
        voyage_number = int(match.group(2))
        return base_name, voyage_number
    else:
        return vessel_str, 0

arrival_data[['–±–∞–∑–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–æ–º–µ—Ä_–∫—Ä—É–≥–æ—Ä–µ–π—Å–∞']] = arrival_data['—Å—É–¥–Ω–æ'].apply(
    lambda x: pd.Series(analyze_circular_voyages(x))
)
vessel_visit_stats = arrival_data.groupby('–±–∞–∑–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ').agg({
    '–¥–∞—Ç–∞_–ø—Ä–∏–Ω—è—Ç–∏—è_–Ω–∞_–ø–∏—Ä—Å': 'nunique',
    '–Ω–æ–º–µ—Ä_–∫—Ä—É–≥–æ—Ä–µ–π—Å–∞': 'max',
    '–±—Ä—É—Ç—Ç–æ': 'sum',
    '—Å—É–¥–Ω–æ': 'first'
}).reset_index()
vessel_visit_stats.columns = ['–±–∞–∑–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞—Ö–æ–¥–æ–≤', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–∫—Ä—É–≥–æ—Ä–µ–π—Å', '–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂', '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ']
vessels_without_circular = vessel_visit_stats[
    (vessel_visit_stats['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞—Ö–æ–¥–æ–≤'] == 1) &
    (vessel_visit_stats['–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–∫—Ä—É–≥–æ—Ä–µ–π—Å'] == 0)
]

# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ ===
fig = make_subplots(
    rows=4, cols=3,
    subplot_titles=(
        '–û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º: –æ—Ç–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞ –ø—Ä–∏—á–∞–ª–µ, –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ',
        '–¢–æ–Ω–Ω–∞–∂ –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–±—Ä—É—Ç—Ç–æ)',
        '–ü–æ–º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: –ø—Ä–∏–Ω—è—Ç–æ vs –æ—Ç–≥—Ä—É–∂–µ–Ω–æ',
        '–¢–æ–ø-15 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ç–æ–Ω–Ω–∞–∂—É –∑–∞ —Ä–µ–π—Å',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º',
        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º',
        '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–æ–Ω–Ω–∞–∂—É',
        '–¢–æ–ø-10 —Å—É–¥–æ–≤ –±–µ–∑ –∫—Ä—É–≥–æ—Ä–µ–π—Å–æ–≤',
        '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)',
        #'–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        '', ''
    ),
    specs=[
        [{"type": "bar"}, {"type": "bar"}, {"type": "bar"}],
        [{"type": "bar"}, {"type": "bar"}, {"type": "bar"}],
        [{"type": "histogram"}, {"type": "bar"}, {"type": "bar"}],
        [{"type": "heatmap", "colspan": 3}, None, None]
    ],
    vertical_spacing=0.06,
    horizontal_spacing=0.04
)

# 1. –û–±—ä—ë–º—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–æ—Ç–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞ –ø—Ä–∏—á–∞–ª–µ, –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ)
if len(client_status) > 0:
    fig.add_trace(go.Bar(x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ'], name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', marker_color='lightcoral'), row=1, col=1)
    fig.add_trace(go.Bar(x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–Ω–∞_–ø—Ä–∏—á–∞–ª–µ'], name='–ù–∞ –ø—Ä–∏—á–∞–ª–µ', marker_color='lightgreen'), row=1, col=1)
    fig.add_trace(go.Bar(x=client_status['–∫–ª–∏–µ–Ω—Ç'], y=client_status['–≤_—Ç—Ä–∞–Ω–∑–∏—Ç–µ'], name='–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ', marker_color='lightblue'), row=1, col=1)

# 2. –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
if len(shipped_today_by_client) > 0:
    fig.add_trace(go.Bar(
        x=shipped_today_by_client['–∫–ª–∏–µ–Ω—Ç'],
        y=shipped_today_by_client['–±—Ä—É—Ç—Ç–æ'],
        name='–°–µ–≥–æ–¥–Ω—è –æ—Ç–≥—Ä—É–∂–µ–Ω–æ',
        marker_color='gold',
        hovertemplate='<b>%{x}</b><br>–¢–æ–Ω–Ω–∞–∂: %{y:,.1f} —Ç<extra></extra>'
    ), row=1, col=2)
else:
    fig.add_trace(go.Bar(x=["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"], y=[0], name='–°–µ–≥–æ–¥–Ω—è –æ—Ç–≥—Ä—É–∂–µ–Ω–æ', marker_color='gray'), row=1, col=2)

# 3. –ü–æ–º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
if len(monthly_stats) > 0:
    fig.add_trace(go.Bar(x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω'], name='–ü—Ä–∏–Ω—è—Ç–æ', marker_color='lightgreen'), row=1, col=3)
    fig.add_trace(go.Bar(x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω'], name='–û—Ç–≥—Ä—É–∂–µ–Ω–æ', marker_color='lightcoral'), row=1, col=3)

# 4. –¢–æ–ø-15 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ç–æ–Ω–Ω–∞–∂—É –∑–∞ —Ä–µ–π—Å
if len(client_analysis_all_time) > 0:
    top_clients = client_analysis_all_time.head(15)
    fig.add_trace(go.Bar(
        y=top_clients['–∫–ª–∏–µ–Ω—Ç'],
        x=top_clients['—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å'],
        orientation='h',
        marker_color='lightblue',
        name='–°—Ä–µ–¥–Ω–∏–π —Ç–æ–Ω–Ω–∞–∂/—Ä–µ–π—Å',
        hovertemplate='<b>%{y}</b><br>–°—Ä–µ–¥–Ω–∏–π —Ç–æ–Ω–Ω–∞–∂: %{x:.1f} —Ç/—Ä–µ–π—Å<br>–†–µ–π—Å–æ–≤: %{customdata}<extra></extra>',
        customdata=top_clients['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤']
    ), row=2, col=1)

# 5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
if len(monthly_stats) > 0:
    fig.add_trace(go.Bar(x=monthly_stats['–º–µ—Å—è—Ü'], y=monthly_stats['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤'], name='–†–µ–π—Å—ã', marker_color='orange'), row=2, col=2)

# 6. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
if len(monthly_stats) > 0:
    colors = ['green' if e >= 90 else 'orange' if e >= 70 else 'red' for e in monthly_stats['—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è']]
    fig.add_trace(go.Bar(
        x=monthly_stats['–º–µ—Å—è—Ü'],
        y=monthly_stats['—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'],
        marker_color=colors,
        name='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        hovertemplate='<b>%{x}</b><br>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %{y:.1f}%<extra></extra>'
    ), row=2, col=3)

# 7. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
if len(client_analysis_all_time) > 0:
    fig.add_trace(go.Histogram(x=client_analysis_all_time['—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å'], nbinsx=15, name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', marker_color='lightgreen'), row=3, col=1)

# 8. –°—É–¥–∞ –±–µ–∑ –∫—Ä—É–≥–æ—Ä–µ–π—Å–æ–≤
if len(vessels_without_circular) > 0:
    top_vessels = vessels_without_circular.nlargest(10, '–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂')
    fig.add_trace(go.Bar(
        y=top_vessels['–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ'],
        x=top_vessels['–æ–±—â–∏–π_—Ç–æ–Ω–Ω–∞–∂'],
        orientation='h',
        marker_color='lightcoral',
        name='–°—É–¥–Ω–∞ –±–µ–∑ –∫—Ä—É–≥–æ—Ä–µ–π—Å–æ–≤'
    ), row=3, col=2)

# 9. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
if len(monthly_stats) > 0:
    metrics = ['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—É–¥–æ–≤']
    names = ['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–≥—Ä—É–∂–µ–Ω–æ', '–†–µ–π—Å—ã', '–°—É–¥–Ω–∞']
    colors = ['lightgreen', 'lightcoral', 'orange', 'lightblue']
    for m, n, c in zip(metrics, names, colors):
        norm = monthly_stats[m] / monthly_stats[m].max() if monthly_stats[m].max() > 0 else 0
        fig.add_trace(go.Bar(x=monthly_stats['–º–µ—Å—è—Ü'], y=norm, name=n, marker_color=c), row=3, col=3)

# 10. –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
#if len(monthly_stats) > 1:
#    corr_data = monthly_stats[['–ø—Ä–∏–Ω—è—Ç–æ_—Ç–æ–Ω–Ω', '–æ—Ç–≥—Ä—É–∂–µ–Ω–æ_—Ç–æ–Ω–Ω', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—É–¥–æ–≤', '—Å—Ä–µ–¥–Ω–∏–π_—Ç–æ–Ω–Ω–∞–∂_–∑–∞_—Ä–µ–π—Å']]
#    corr_matrix = corr_data.corr()
#    fig.add_trace(go.Heatmap(
#        z=corr_matrix.values,
#        x=['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–≥—Ä—É–∂–µ–Ω–æ', '–†–µ–π—Å—ã', '–°—É–¥–Ω–∞', '–¢–æ–Ω–Ω–∞–∂/—Ä–µ–π—Å'],
#        y=['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–≥—Ä—É–∂–µ–Ω–æ', '–†–µ–π—Å—ã', '–°—É–¥–Ω–∞', '–¢–æ–Ω–Ω–∞–∂/—Ä–µ–π—Å'],
#        colorscale='RdBu', zmin=-1, zmax=1,
#        hovertemplate='<b>%{y} vs %{x}</b><br>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: %{z:.3f}<extra></extra>',
#        colorbar=dict(title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
#   ), row=4, col=1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
fig.update_layout(
    height=1600,
    showlegend=True,
    barmode='stack',
    template='plotly_white',
    margin=dict(t=80, b=50, l=50, r=50)
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
st.plotly_chart(fig, use_container_width=True)

# –ü–æ—è—Å–Ω–µ–Ω–∏—è
st.markdown("""
---
### üìå –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
- **–ù–∞ –ø—Ä–∏—á–∞–ª–µ** ‚Äî –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ –æ—Ç–≥—Ä—É–∂–µ–Ω–æ  
- **–í —Ç—Ä–∞–Ω–∑–∏—Ç–µ** ‚Äî –≥—Ä—É–∑ –≤ –ø—É—Ç–∏ –∫ –ø—Ä–∏—á–∞–ª—É  
- **–°–µ–≥–æ–¥–Ω—è** ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∞ —Å –¥–∞—Ç–æ–π, —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
""")
